{"name":"Tenso","tagline":"Tensō is a REST API facade for node.js","body":"Tensō\r\n=====\r\n\r\nTensō is a REST API facade for node.js, designed to simplify the implementation of APIs.\r\n\r\nTensō will handle the serialization & creation of hypermedia links, all you have to do is give it `Arrays` or `Objects`.\r\n\r\n[![build status](https://secure.travis-ci.org/avoidwork/tenso.svg)](http://travis-ci.org/avoidwork/tenso)\r\n\r\n## Example\r\nCreating an API with Tensō is as simple as three statements.\r\n\r\n```javascript\r\nvar tenso  = require( \"tenso\" ),\r\n    routes = require( \"./routes.js\" );\r\n\r\ntenso( {routes: routes} );\r\n```\r\n\r\n### Creating Routes\r\nRoutes are loaded as a module, with each HTTP method as an export, affording a very customizable API server.\r\n\r\nRoute handlers have the context of the Tensō server, i.e. `this` will allow you to send a response with `this.respond( req, res, body[, status, headers] )`.\r\n\r\nThe following example will create GET routes that will return an empty `Array` at `/`, an `Error` at `/reports/tps`, & a version 4 UUID at `/uuid`.\r\n\r\n```javascript\r\nvar uuid = require( \"keigai\" ).util.uuid;\r\n\r\nmodule.exports.get = {\r\n\t\"/\": [],\r\n\t\"/reports/tps\": function ( req, res ) {\r\n\t\tthis.respond( req, res, new Error( \"TPS Cover Sheet not attached\" ), 785 );\r\n\t},\r\n\t\"/uuid\": function ( req, res ) {\r\n\t\tthis.respond( req, res, uuid(), 200, {\"cache-control\": \"no-cache\"} );\r\n\t}\r\n}\r\n```\r\n\r\n### Request Helpers\r\nTensō decorates `req` with \"helpers\" such as `req.ip`, & `req.parsed`. Cookies are available at `req.cookies{}`. Sessions are available at `req.sessions{}`. `PATCH`, `PUT`, or `POST` payloads are available as `req.body`.\r\n\r\n## Responses\r\nResponses will have a standard shape. The result, and hypermedia will be in `data`. Hypermedia (pagination, links, etc.) will be in `data.link:[ {\"uri\": \"...\", \"rel\": \"...\"}, ...]`, & pagination will also be present via the `Link` HTTP header.\r\nThe result will be in `data.result`.\r\n\r\n```json\r\n{\r\n  \"data\": {{ `null` or `{link: [], result: ?}` }},\r\n  \"error\": {{ `null` or an `Error` stack trace / message }},\r\n  \"status\": {{ HTTP status code }}\r\n}\r\n```\r\n\r\n## REST / Hypermedia\r\nHypermedia is a prerequisite of REST, and is best described by the [Richard Maturity Model](http://martinfowler.com/articles/richardsonMaturityModel.html). Tensō will automagically paginate Arrays of results, or parse Entity representations for keys that imply\r\nrelationships, and create the appropriate Objects in the `link` Array, as well as the `Link` HTTP header. Object keys that match this pattern: `/_(guid|uuid|id|uri|url)$/` will be considered\r\nhypermedia links.\r\n\r\nFor example, if the key `user_id` was found, it would be mapped to `/users/:id` with a link `rel` of `related`.\r\n\r\n## Cache\r\nTensō has a robust multi-level cache strategy, starting at the response headers. If a response can be cached, an `Etag` will be sent to the `Client`, and registered in an `Etag LRU cache` which Tensō \r\nuses along with a 'cache compressed asset to disk' strategy, allowing Tensō to stream the last known version of a resource to the next `Client` that supports the same compression (gzip or deflate).\r\n`Etags` will lazy expire from the cache, to minimize wasted cycles.\r\n\r\nCaching can be disabled by setting the `cache-control` header to a \"private\" or \"no cache\" directive (see the above `/uuid` example).\r\n \r\n## Configuration\r\nThis is a sample configuration for Tensō, without authentication or SSL. This would be ideal for development, but not production! Enabling SSL is as easy as providing file paths for the two keys.\r\n\r\n```json\r\n{\r\n\t\"auth\": /* Optional, see Authentication section */ \r\n\t\"hostname\": \"localhost\", /* Optional, default is 'localhost' */\r\n\t\"port\": 8000, /* Optional, default is 8000 */\r\n\t\"uid\": N, /* Optional, system account uid to drop to after starting with elevated privileges to run on a low port */\r\n\t\"routes\": require( \"./routes.js\" ), /* Required! */\r\n\t\"logs\": { /* Optional */\r\n\t\t\"level\": \"info\",\r\n\t\t\"stdout\": true,\r\n\t\t\"dtrace\": false,\r\n\t\t\"syslog\": false\r\n\t},\r\n\t\"ssl\": { /* Optional */\r\n\t\t\"key\": null,\r\n\t\t\"cert\": null\r\n\t}\r\n}\r\n```\r\n\r\n## Authentication\r\nPlanned authentication options are `Basic Auth`, `OAuth2 Bearer Token`, `Twitter`, & `Facebook`.\r\n\r\n### Basic Auth\r\n`Basic Auth` will be applied to the entire API if enabled.\r\n\r\n```json\r\n{\r\n\t\"auth\": {\r\n\t\t\"basic\": {\r\n\t\t\t\"enabled\": true,\r\n\t\t\t\"list\": [\"username:password\", ...],\r\n\t\t\t\"realm\": \"Private\" // `realm` is optional\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\n### Oauth2 Bearer Token\r\nThe `protect` Array is the endpoints that will be protected by `OAuth2 Bearer Tokens`.\r\n\r\n```json\r\n{\r\n\t\"auth\": {\r\n\t\t\"bearer\": {\r\n\t\t\t\"enabled\": true,\r\n\t\t\t\"tokens\": [\"abc\", ...]\r\n\t\t},\r\n\t\t\"protect\": [\"/\"]\r\n\t}\r\n}\r\n```\r\n\r\n## Logging\r\nStandard log levels are supported, and are emitted (by configuration) to `stdout` & `stderr`, & `syslog`.\r\n\r\n## Dtrace\r\nDtrace probes can be enabled by configuration (disabled by default), and can be observed as `turtle-io`; Tensō is built on [turtle.io](https://github.com/avoidwork/turtle.io).\r\n\r\n```\r\n\"allowed\",        \"char *\", \"char *\", \"char *\", \"int\"\r\n\"allows\",         \"char *\", \"char *\", \"int\"\r\n\"compress\",       \"char *\", \"char *\", \"int\"\r\n\"compression\",    \"char *\", \"int\"\r\n\"error\",          \"char *\", \"char *\", \"int\", \"char *\", \"int\"\r\n\"headers\",        \"int\", \"int\"\r\n\"log\",            \"char *\", \"int\", \"int\", \"int\"\r\n\"proxy\",          \"char *\", \"char *\", \"char *\", \"char *\", \"int\"\r\n\"middleware\",     \"char *\", \"char *\", \"int\"\r\n\"request\",        \"char *\", \"int\"\r\n\"respond\",        \"char *\", \"char *\", \"char *\", \"int\", \"int\"\r\n\"status\",         \"int\", \"int\", \"int\", \"int\", \"int\"\r\n\"write\",          \"char *\", \"char *\", \"char *\", \"char *\", \"int\"\r\n```\r\n\r\n## License\r\nCopyright (c) 2014 Jason Mulligan  \r\nLicensed under the BSD-3 license.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}